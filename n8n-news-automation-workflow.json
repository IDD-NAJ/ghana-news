{
  "name": "Automated News Content Pipeline",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 2
            }
          ]
        }
      },
      "id": "1",
      "name": "Schedule Every 2 Hours",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "url": "https://xpmclamtmlogogcpogbq.supabase.co/rest/v1/news_sources",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhwbWNsYW10bWxvZ29nY3BvZ2JxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgyNzY3NDYsImV4cCI6MjA2Mzg1Mjc0Nn0.Q8Xob5r1aRxjz4W24J7XRCXqxswkBTMcLKXJSXwJCqA"
            }
          ]
        }
      },
      "id": "2",
      "name": "Fetch Active News Sources",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": [
          {
            "leftValue": "={{ $json.active }}",
            "rightValue": true,
            "operator": "equal"
          }
        ]
      },
      "id": "3",
      "name": "Filter Active Sources",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "batchSize": 1
      },
      "id": "4",
      "name": "Split Into Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": [
          {
            "leftValue": "={{ $json.rss_feed_url }}",
            "rightValue": "",
            "operator": "isNotEmpty"
          },
          {
            "leftValue": "={{ $json.rss_feed_url }}",
            "rightValue": null,
            "operator": "isNotEqual"
          },
          {
            "leftValue": "={{ typeof $json.rss_feed_url }}",
            "rightValue": "undefined",
            "operator": "isNotEqual"
          }
        ],
        "combineOperation": "all"
      },
      "id": "5",
      "name": "Has RSS Feed?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "url": "={{ $json.rss_feed_url }}",
        "options": {
          "ignoreSSLIssues": true,
          "timeout": 30000
        }
      },
      "id": "6",
      "name": "Fetch RSS Content",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [1340, 120]
    },
    {
      "parameters": {
        "url": "={{ $json.url }}"
      },
      "id": "7",
      "name": "Scrape Website",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1340, 280]
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.first().json;\nconst htmlContent = inputData.data || inputData.body || '';\nconst sourceUrl = inputData.url || '';\n\nif (!htmlContent) {\n  return [];\n}\n\nconst articles = [];\n\n// Enhanced HTML parsing for Ghanaian news sites\nlet cleanText = htmlContent\n  .replace(/<script[^>]*>[\\s\\S]*?<\\/script>/gi, '')\n  .replace(/<style[^>]*>[\\s\\S]*?<\\/style>/gi, '')\n  .replace(/<nav[^>]*>[\\s\\S]*?<\\/nav>/gi, '')\n  .replace(/<footer[^>]*>[\\s\\S]*?<\\/footer>/gi, '')\n  .replace(/<header[^>]*>[\\s\\S]*?<\\/header>/gi, '');\n\n// Extract article titles and content\nconst titleMatches = cleanText.match(/<h[1-6][^>]*>([^<]+)<\\/h[1-6]>/gi) || [];\nconst contentMatches = cleanText.match(/<p[^>]*>([^<]{50,})<\\/p>/gi) || [];\n\n// Process potential articles\nfor (let i = 0; i < Math.min(titleMatches.length, 5); i++) {\n  const title = titleMatches[i].replace(/<[^>]*>/g, '').trim();\n  const content = contentMatches.slice(i, i + 3).map(p => p.replace(/<[^>]*>/g, '').trim()).join(' ');\n  \n  if (title.length > 10 && content.length > 200) {\n    articles.push({\n      original_title: title.substring(0, 200),\n      original_content: content.substring(0, 1500),\n      original_url: sourceUrl,\n      source_name: sourceUrl.includes('myjoyonline') ? 'MyJoyOnline' : sourceUrl.includes('ghanaweb') ? 'GhanaWeb' : 'Web Source',\n      source_url: sourceUrl,\n      suggested_category: 'News',\n      image_url: null\n    });\n  }\n}\n\n// Fallback: if no structured articles found, create one from all text\nif (articles.length === 0 && cleanText.length > 500) {\n  const fullText = cleanText.replace(/<[^>]*>/g, ' ').replace(/\\s+/g, ' ').trim();\n  if (fullText.length > 200) {\n    articles.push({\n      original_title: 'Web Article from ' + (sourceUrl.includes('myjoyonline') ? 'MyJoyOnline' : sourceUrl.includes('ghanaweb') ? 'GhanaWeb' : 'Web Source'),\n      original_content: fullText.substring(0, 2000),\n      original_url: sourceUrl,\n      source_name: sourceUrl.includes('myjoyonline') ? 'MyJoyOnline' : sourceUrl.includes('ghanaweb') ? 'GhanaWeb' : 'Web Source',\n      source_url: sourceUrl,\n      suggested_category: 'News',\n      image_url: null\n    });\n  }\n}\n\nreturn articles.slice(0, 3); // Limit to 3 articles per source"
      },
      "id": "8",
      "name": "Parse HTML Articles",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 280]
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst articles = [];\n\nfor (const item of items) {\n  const data = item.json;\n  \n  const article = {\n    original_title: data.title || '',\n    original_content: (data.content || data.description || data.summary || '').replace(/<[^>]*>/g, '').trim(),\n    original_url: data.link || data.url || '',\n    source_name: 'RSS Source',\n    source_url: data.link || data.url || '',\n    suggested_category: data.category || 'News',\n    image_url: null\n  };\n  \n  if (article.original_title && article.original_content && article.original_content.length > 100) {\n    if (article.original_content.length > 2000) {\n      article.original_content = article.original_content.substring(0, 2000) + '...';\n    }\n    articles.push(article);\n  }\n}\n\nreturn articles.slice(0, 10);"
      },
      "id": "9",
      "name": "Process RSS Items",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 120]
    },
    {
      "parameters": {
        "mode": "combine"
      },
      "id": "10",
      "name": "Merge All Articles",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [1780, 200]
    },
    {
      "parameters": {
        "conditions": [
          {
            "leftValue": "={{ $json.original_content.length }}",
            "rightValue": 200,
            "operator": "largerEqual"
          },
          {
            "leftValue": "={{ $json.original_title.length }}",
            "rightValue": 10,
            "operator": "largerEqual"
          }
        ]
      },
      "id": "11",
      "name": "Filter Quality Content",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [2000, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://xpmclamtmlogogcpogbq.supabase.co/functions/v1/n8n-submit-draft",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhwbWNsYW10bWxvZ29nY3BvZ2JxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgyNzY3NDYsImV4cCI6MjA2Mzg1Mjc0Nn0.Q8Xob5r1aRxjz4W24J7XRCXqxswkBTMcLKXJSXwJCqA"
            }
          ]
        },
        "sendBody": true,
        "body": "={\n  \"source_name\": \"{{ $json.source_name }}\",\n  \"source_url\": \"{{ $json.source_url }}\",\n  \"original_url\": \"{{ $json.original_url }}\",\n  \"original_title\": \"{{ $json.original_title }}\",\n  \"original_content\": \"{{ $json.original_content }}\",\n  \"suggested_category\": \"{{ $json.suggested_category }}\",\n  \"image_url\": \"{{ $json.image_url }}\"\n}"
      },
      "id": "12",
      "name": "Submit to Draft API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2220, 200]
    },
    {
      "parameters": {
        "jsCode": "const results = $input.all();\nlet successful = 0;\nlet failed = 0;\n\nfor (const result of results) {\n  if (result.json && result.json.success) {\n    successful++;\n  } else {\n    failed++;\n  }\n}\n\nconsole.log('Workflow completed:', successful, 'successful,', failed, 'failed submissions');\n\nreturn [{\n  successful_submissions: successful,\n  failed_submissions: failed,\n  total_processed: results.length,\n  timestamp: new Date().toISOString()\n}];"
      },
      "id": "13",
      "name": "Log Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2440, 200]
    }
  ],
  "connections": {
    "1": {
      "main": [
        [
          {
            "node": "2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2": {
      "main": [
        [
          {
            "node": "3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3": {
      "main": [
        [
          {
            "node": "4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4": {
      "main": [
        [
          {
            "node": "5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5": {
      "main": [
        [
          {
            "node": "6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6": {
      "main": [
        [
          {
            "node": "9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "7": {
      "main": [
        [
          {
            "node": "8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "8": {
      "main": [
        [
          {
            "node": "10",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "9": {
      "main": [
        [
          {
            "node": "10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "10": {
      "main": [
        [
          {
            "node": "11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "11": {
      "main": [
        [
          {
            "node": "12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "12": {
      "main": [
        [
          {
            "node": "13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "your-instance-id"
  },
  "id": "news-automation-workflow",
  "tags": ["news", "automation", "ai"]
}